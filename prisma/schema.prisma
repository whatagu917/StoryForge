// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                  String         @id @default(auto()) @map("_id") @db.ObjectId
  email               String         @unique
  name                String?
  username            String?
  password            String         // パスワードフィールドを追加
  revisions           Revision[]
  ideas               Idea[]
  styleProfiles       StyleProfile[]
  chatHistory         ChatHistory[]
  chapters            Chapter[]
  stories             Story[]
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  emailVerified       Boolean        @default(false)
  verificationToken   String?
  verificationExpires DateTime?
  resetToken          String?
  resetTokenExpires   DateTime?
  refreshTokens       RefreshToken[]

  @@map("users")
}

model Revision {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  content         String
  previousContent String
  chapterId       String   @db.ObjectId
  storyId         String   @db.ObjectId
  type            String   // 'ai' or 'manual'
  chapterTitle    String
  chapterNumber   Int
  userId          String   @db.ObjectId
  user            User     @relation(fields: [userId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Idea {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  tags        String[]
  aiGenerated Boolean  @default(false)
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model StyleProfile {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  settings    Json
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ChatHistory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  role      String   // 'user' or 'assistant'
  content   String
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Chapter {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  number      Int
  storyId     String   @db.ObjectId
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Story {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model RefreshToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  expires   DateTime
  createdAt DateTime @default(now())

  @@index([userId])
} 